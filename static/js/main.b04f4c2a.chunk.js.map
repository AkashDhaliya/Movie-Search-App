{"version":3,"sources":["Components/HeaderComponent/Header.jsx","Components/LoadingSpinnerComponent/LoadingSpinner.jsx","Components/FavouriteComponent/Favourite.jsx","Components/SearchComponent/Search.jsx","Components/RequestComponent/Requests.jsx","Constants/Const.js","Components/MoviedetailsComponent/MovieDetailComponent.jsx","Components/ModalComponent/Modal.jsx","Components/MoviesCardComponent/MovieCard.jsx","Components/MoviesContainerComponent/MoviesContainer.jsx","Components/FooterComponent/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","exact","activeClassName","to","LoadingSpinner","Favourite","useState","favourites","setFavourites","getFavItems","values","keys","Object","localStorage","i","length","push","JSON","parse","getItem","favouriteHandler","data","window","confirm","Title","removeItem","imdbID","useEffect","map","item","key","Year","onClick","bind","src","Poster","alt","Search","props","searchValue","setSearchValue","inputError","setInputError","searchDropdown","setSearchDropdown","onChange","evt","value","target","RegExp","test","detectInputValidation","setTimeout","maxLength","autoComplete","type","placeholder","name","e","setSearch","Requests","params","axios","get","Modal","WrappedComponent","this","showMovieDetailmodal","hideMovieDetailmodal","Component","movieDetail","setMovieDetail","movieSummary","setMovieSummary","isResponse","setIsResponse","isError","setIError","then","response","ratings","forEach","val","error","getSearchData","apikey","id","plot","posterurl","rating","Source","Value","MovieCard","checkToRenderOnUpdate","prevProps","searchQuery","searchType","Response","state","moviesList","concat","filter","index","findIndex","ind","favItemsId","favItem","favourite","setState","totalResults","page_no","errorMessage","Error","loadMoreData","pageNo","scrollHeight","scrollTop","parseInt","s","page","favouriteAdded","setItem","stringify","immutedData","stopPropagation","showMovieDetails","movieId","currentTarget","dataset","imdbid","poster","showMovieDetail","showMovieDetailPosterUrl","movieDetailmodal","onScroll","data-imdbid","data-posterurl","MoviesContainer","setSearchQuery","setSearchType","query","Footer","role","aria-label","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b04f4c2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <nav>\r\n        <div className=\"Container\">\r\n          <div className=\"app-header\">\r\n            <h1>Movies</h1>\r\n          </div>\r\n          <ul>\r\n            <li>\r\n              <NavLink exact activeClassName=\"active\" to=\"/favourite\">\r\n                Favourites\r\n              </NavLink>\r\n            </li>\r\n\r\n            <li>\r\n              <NavLink exact activeClassName=\"active\" to=\"/\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n    <section className=\"loading\">\r\n      <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FaHeart } from \"react-icons/fa\";\r\nimport Loading from \"../LoadingSpinnerComponent/LoadingSpinner\";\r\n\r\nfunction Favourite() {\r\n  const [favourites, setFavourites] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getFavItems();\r\n  }, []);\r\n\r\n  function getFavItems() {\r\n    let values = [];\r\n    let keys = Object.keys(localStorage);\r\n    let i = keys.length;\r\n\r\n    while (i--) {\r\n      values.push(JSON.parse(localStorage.getItem(keys[i])));\r\n    }\r\n    setFavourites(values);\r\n  }\r\n\r\n  function favouriteHandler(data) {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you want to remove\\r ${data.Title} from favourites?`\r\n      )\r\n    ) {\r\n      localStorage.removeItem(data.imdbID);\r\n      getFavItems();\r\n    }\r\n  }\r\n\r\n  if (favourites !== null && favourites.length !== 0) {\r\n    return (\r\n      <section className=\"favouriteMoviesListSec\">\r\n        <div className=\"resultInfo\">\r\n          Total favourite items&nbsp;:&nbsp;{favourites.length}\r\n        </div>\r\n        {favourites.map((item) => {\r\n          return (\r\n            <div key={item.imdbID} className=\"movieCard\">\r\n              <div className=\"container\">\r\n                <h3>\r\n                  <strong>{item.Title}</strong>&nbsp;\r\n                </h3>\r\n                <small>({item.Year})</small>\r\n              </div>\r\n              <div\r\n                className=\"favourite\"\r\n                onClick={favouriteHandler.bind(null, item)}\r\n              >\r\n                <FaHeart className=\"liked\" />\r\n              </div>\r\n              <img src={item.Poster} alt={item.Title} />\r\n            </div>\r\n          );\r\n        })}\r\n      </section>\r\n    );\r\n  } else if (favourites !== null && favourites.length === 0) {\r\n    return (\r\n      <section className=\"favouriteMoviesListSec\">\r\n        <div className=\"errorMessage\">\r\n          As of now you do not have any favourite item.\r\n        </div>\r\n      </section>\r\n    );\r\n  } else {\r\n    return (\r\n      <section className=\"favouriteMoviesListSec\">\r\n        <Loading />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Favourite;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Search(props) {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [inputError, setInputError] = useState(\"\");\r\n  const [searchDropdown, setSearchDropdown] = useState(\"\");\r\n\r\n  function submitSearch() {\r\n    if (searchValue !== \"\") {\r\n      props.setSearch(searchValue, searchDropdown);\r\n    }\r\n  }\r\n\r\n  function searchHandler(evt) {\r\n    let value = evt.target.value;\r\n    let validate = value.length === 0 ? true : detectInputValidation(evt);\r\n    if (validate) {\r\n      setSearchValue(value);\r\n      setInputError(\"\");\r\n    } else {\r\n      setInputError(\"Special character not allowed excluding : and -\");\r\n      setTimeout(function () {\r\n        setInputError(\"\");\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  function detectInputValidation(evt) {\r\n    const regex = new RegExp(/^[a-z\\d\\-:\\s]+$/i);\r\n    if (regex.test(evt.target.value)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"search-section\">\r\n        <input\r\n          onChange={searchHandler}\r\n          maxLength=\"50\"\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          value={searchValue}\r\n          placeholder=\"Search...\"\r\n          name=\"search\"\r\n        />\r\n        <select\r\n          className=\"search-category\"\r\n          value={searchDropdown}\r\n          onChange={(e) => setSearchDropdown(e.target.value)}\r\n          name=\"searchDropdown\"\r\n        >\r\n          <option value=\"\">Options</option>\r\n          <option value=\"movie\">Movies</option>\r\n          <option value=\"series\">Series</option>\r\n          <option value=\"episode\">Episodes</option>\r\n        </select>\r\n        <button className=\"search-btn\" onClick={submitSearch}>\r\n          Search\r\n        </button>\r\n      </div>\r\n      <div className=\"search-input-error\">{inputError}</div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import axios from \"axios\";\r\nimport { URL } from \"../../Constants/Const\";\r\n\r\nfunction Requests(params) {\r\n  return axios.get(`${URL}`, { params: params });\r\n}\r\n\r\nexport default Requests;\r\n","/**Export required static values for to use in the module */\r\nexport const URL = \"https://www.omdbapi.com/\";\r\nexport const API_KEY = \"8c351687\";\r\nexport const NO_OF_ITEMS = 30;\r\nexport const ORDER_BY = \"popular\";","import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"../ModalComponent/Modal\";\r\nimport Requests from \"../RequestComponent/Requests\";\r\nimport { API_KEY } from \"../../Constants/Const\";\r\nimport Loading from \"../LoadingSpinnerComponent/LoadingSpinner\";\r\n\r\nfunction MovieDetailComponent(props) {\r\n  const [movieDetail, setMovieDetail] = useState([]);\r\n  const [movieSummary, setMovieSummary] = useState(\"\");\r\n  const [isResponse, setIsResponse] = useState(false);\r\n  const [isError, setIError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let params = {\r\n      apikey: API_KEY,\r\n      i: props.id,\r\n      plot: \"full\",\r\n    };\r\n    getSearchData(params);\r\n  }, [props.id]);\r\n\r\n  function getSearchData(params) {\r\n    Requests(params).then(\r\n      (response) => {\r\n        let keys = Object.keys(response.data);\r\n        let data = [];\r\n        let ratings;\r\n        keys.forEach((item) => {\r\n          if (item !== \"Poster\" && item !== \"imdbID\" && item !== \"Plot\" && item !== \"Ratings\") {\r\n            data.push({ key: item, val: response.data[item] });\r\n          } else if (item === \"Ratings\") {\r\n            ratings = { key: item, val: response.data[item] };\r\n          } else if (item === \"Plot\") {\r\n            setMovieSummary(response.data[item]);\r\n          }\r\n        });\r\n        data.push(ratings);\r\n        setMovieDetail(data);\r\n        setIsResponse(true);\r\n        setIError(false);\r\n      },\r\n      (error) => {\r\n        setIsResponse(true);\r\n        setIError(true);\r\n      }\r\n    );\r\n  }\r\n\r\n  if (isResponse && !isError) {\r\n    return (\r\n      <>\r\n        <div className=\"movieSummary\">\r\n          <span className=\"movieSummaryLabel\">Summary</span>\r\n          <span>:</span>\r\n          <span className=\"movieDetailLableVal\">{movieSummary}</span>\r\n        </div>\r\n        <div className=\"moviedetailSec\">\r\n          <div className=\"movieDetailImg\">\r\n            <img src={props.posterurl} alt=\"Movie Name\" />\r\n          </div>\r\n          <ul>\r\n            {movieDetail.map((item) => {\r\n              if (item.key === \"Ratings\") {\r\n                return (\r\n                  <li className=\"ratingListItem\" key={item.key}>\r\n                    <span className=\"movieDetailLable\">{item.key}</span>\r\n                    <span>:</span>\r\n                    <span className=\"movieDetailLableVal\">\r\n                      {item.val.map((rating) => {\r\n                        return (\r\n                          <span className=\"customeTags\" key={rating.Source}>\r\n                            {rating.Source}&nbsp;:&nbsp;{rating.Value}\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </span>\r\n                  </li>\r\n                );\r\n              } else {\r\n                return (\r\n                  <li key={item.key}>\r\n                    <span className=\"movieDetailLable\">{item.key}</span>\r\n                    <span>:</span>\r\n                    <span className=\"movieDetailLableVal\">{item.val}</span>\r\n                  </li>\r\n                );\r\n              }\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </>\r\n    );\r\n  } else if (isResponse && isError) {\r\n    return <div className=\"moviedetailSec\">Oops something went wrong.</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"moviedetailSec\">\r\n        <Loading />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal(MovieDetailComponent);\r\n","import React, { Component } from \"react\";\r\n\r\nconst Modal = (WrappedComponent) => {\r\n  return class extends Component {\r\n    render() {\r\n      return (\r\n        <div\r\n          className={\r\n            this.props.showMovieDetailmodal ? \"modal show-modal\" : \"modal\"\r\n          }\r\n        >\r\n          <div className=\"modal-content\">\r\n            <span\r\n              className=\"close-button\"\r\n              onClick={this.props.hideMovieDetailmodal}\r\n            >\r\n              ×\r\n            </span>\r\n            <WrappedComponent {...this.props} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\nimport Requests from \"../RequestComponent/Requests\";\r\nimport { API_KEY } from \"../../Constants/Const\";\r\nimport { FaHeart, FaRegHeart } from \"react-icons/fa\";\r\nimport Loading from \"../LoadingSpinnerComponent/LoadingSpinner\";\r\nimport MovieDetailComponent from \"../MoviedetailsComponent/MovieDetailComponent\";\r\n\r\nclass MovieCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      moviesList: [],\r\n      favItemsId: [],\r\n      page_no: 1,\r\n      totalResults: 0,\r\n      isError: false,\r\n      isResponse: true,\r\n      showMovieDetail: \"\",\r\n      showMovieDetailPosterUrl: \"\",\r\n      movieDetailmodal: false,\r\n      errorMessage: \"Your search begins here.\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ favItemsId: Object.keys(localStorage) });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.checkToRenderOnUpdate(prevProps)) {\r\n      let params = {\r\n        apikey: API_KEY,\r\n        s: this.props.searchQuery,\r\n        type: this.props.searchType,\r\n        plot: \"full\",\r\n        page: 1,\r\n      };\r\n      this.setState({\r\n        moviesList: [],\r\n        isResponse: true,\r\n        isError: false,\r\n        errorMessage: \"\",\r\n      });\r\n      this.getSearchData(params);\r\n    }\r\n  }\r\n\r\n  checkToRenderOnUpdate = (prevProps) => {\r\n    const { searchQuery, searchType } = this.props;\r\n    if (searchQuery.length !== 0) {\r\n      if (searchQuery !== prevProps.searchQuery) {\r\n        return true;\r\n      } else if (searchQuery === prevProps.searchQuery) {\r\n        if (searchType !== prevProps.searchType) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  getSearchData = (params) => {\r\n    Requests(params).then(\r\n      (response) => {\r\n        if (response.data.Response === \"True\") {\r\n          let data = this.state.moviesList\r\n            .concat(response.data.Search)\r\n            .filter(function (item, index, data) {\r\n              let dataIndex = data.findIndex(\r\n                (ind) => ind.imdbID === item.imdbID\r\n              );\r\n              return dataIndex === index;\r\n            });\r\n\r\n          data = data.map((item) => {\r\n            if (this.state.favItemsId.length !== 0) {\r\n              this.state.favItemsId.map((favItem) => {\r\n                if (favItem === item.imdbID) {\r\n                  item.favourite = true;\r\n                }\r\n                return item;\r\n              });\r\n            } else {\r\n              item.favourite = false;\r\n            }\r\n            return item;\r\n          });\r\n          this.setState({\r\n            moviesList: data,\r\n            totalResults: response.data.totalResults,\r\n            isResponse: true,\r\n            isError: false,\r\n            page_no: data.length / 10,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            moviesList: [],\r\n            isResponse: true,\r\n            isError: false,\r\n            errorMessage: response.data.Error,\r\n          });\r\n        }\r\n      },\r\n      (error) => {\r\n        this.setState({\r\n          isResponse: true,\r\n          isError: true,\r\n          errorMessage:\r\n            \"Oops Something went wrong. Please check you r internet connection or connect with our technical support.\",\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  loadMoreData = (evt) => {\r\n    let pageNo = this.state.moviesList.length / 10 + 1;\r\n    if (\r\n      evt.target.scrollHeight - evt.target.scrollTop < 1000 &&\r\n      this.state.page_no !== pageNo &&\r\n      this.state.isResponse &&\r\n      parseInt(this.state.totalResults) !== this.state.moviesList.length\r\n    ) {\r\n      let params = {\r\n        apikey: API_KEY,\r\n        s: this.props.searchQuery,\r\n        type: this.props.searchType,\r\n        plot: \"full\",\r\n        page: pageNo,\r\n      };\r\n      this.getSearchData(params);\r\n    }\r\n  };\r\n\r\n  favouriteHandler = (data, evt) => {\r\n    let favouriteAdded = false;\r\n    if (localStorage.getItem(data.imdbID)) {\r\n      localStorage.removeItem(data.imdbID);\r\n      favouriteAdded = false;\r\n    } else {\r\n      localStorage.setItem(data.imdbID, JSON.stringify(data));\r\n      favouriteAdded = true;\r\n    }\r\n    let immutedData = this.state.moviesList.map((item) => {\r\n      if (item.imdbID === data.imdbID) {\r\n        item.favourite = favouriteAdded;\r\n        return item;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    this.setState({\r\n      moviesList: immutedData,\r\n    });\r\n    evt.stopPropagation();\r\n  };\r\n\r\n  showMovieDetails = (evt) => {\r\n    let movieId = evt.currentTarget.dataset.imdbid;\r\n    let poster = evt.currentTarget.dataset.posterurl;\r\n    this.setState({\r\n      showMovieDetail: movieId,\r\n      showMovieDetailPosterUrl: poster,\r\n      movieDetailmodal: true,\r\n    });\r\n    evt.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isResponse,\r\n      isError,\r\n      moviesList,\r\n      errorMessage,\r\n      totalResults,\r\n    } = this.state;\r\n    if (isResponse && !isError) {\r\n      return moviesList.length !== 0 ? (\r\n        <section className=\"movieCardSec\" onScroll={this.loadMoreData}>\r\n          {this.state.showMovieDetail !== \"\" && (\r\n            <MovieDetailComponent\r\n              id={this.state.showMovieDetail}\r\n              posterurl={this.state.showMovieDetailPosterUrl}\r\n              showMovieDetailmodal={this.state.movieDetailmodal}\r\n              hideMovieDetailmodal={() =>\r\n                this.setState({\r\n                  showMovieDetail: \"\",\r\n                  showMovieDetailPosterUrl: \"\",\r\n                  movieDetailmodal: false,\r\n                })\r\n              }\r\n            />\r\n          )}\r\n          <div className=\"resultInfo\">\r\n            Showing&nbsp;{moviesList.length}&nbsp;out of&nbsp;{totalResults}\r\n          </div>\r\n          {moviesList.map((item) => {\r\n            return (\r\n              <div\r\n                key={item.imdbID}\r\n                className=\"movieCard\"\r\n                data-imdbid={item.imdbID}\r\n                data-posterurl={item.Poster}\r\n                onClick={this.showMovieDetails}\r\n              >\r\n                <div className=\"container\">\r\n                  <h3>\r\n                    <strong>{item.Title}</strong>&nbsp;\r\n                  </h3>\r\n                  <small>({item.Year})</small>\r\n                </div>\r\n                <div\r\n                  className=\"favourite\"\r\n                  onClick={this.favouriteHandler.bind(null, item)}\r\n                >\r\n                  {item.favourite && <FaHeart className=\"liked\" />}\r\n                  {!item.favourite && <FaRegHeart />}\r\n                </div>\r\n                <img src={item.Poster} alt={item.Title} />\r\n              </div>\r\n            );\r\n          })}\r\n        </section>\r\n      ) : (\r\n        <section className=\"movieCardSec\">\r\n          <div className=\"errorMessage\">{errorMessage}</div>\r\n        </section>\r\n      );\r\n    } else if (isResponse && isError) {\r\n      return (\r\n        <section className=\"movieCardSec\">\r\n          <div className=\"errorMessage\">{errorMessage}</div>\r\n        </section>\r\n      );\r\n    } else {\r\n      return (\r\n        <section className=\"movieCardSec\">\r\n          <Loading />\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default MovieCard;\r\n","import React, { useState } from \"react\";\r\nimport Search from \"../SearchComponent/Search\";\r\nimport MovieCard from \"../MoviesCardComponent/MovieCard\";\r\n\r\nfunction MoviesContainer() {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [searchType, setSearchType] = useState(\"\");\r\n\r\n  function search(query, type) {\r\n    setSearchQuery(query);\r\n    setSearchType(type);\r\n  }\r\n  return (\r\n    <section className=\"moviesContainerSec\">\r\n      <Search setSearch={search} />\r\n      <MovieCard searchQuery={searchQuery} searchType={searchType} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MoviesContainer;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"app-footer\">\r\n      <div>\r\n        <p>\r\n          Let's Fun{\" \"}\r\n          <span role=\"img\" aria-label=\"smile\">\r\n            &#128522;\r\n          </span>\r\n        </p>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Components/HeaderComponent/Header\";\nimport Favourite from './Components/FavouriteComponent/Favourite';\nimport MoviesContainer from './Components/MoviesContainerComponent/MoviesContainer'\nimport Footer from \"./Components/FooterComponent/Footer\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n           <Route exact path=\"/\" component={MoviesContainer}></Route>\n          <Route exact path=\"/favourite\" component={Favourite}></Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}